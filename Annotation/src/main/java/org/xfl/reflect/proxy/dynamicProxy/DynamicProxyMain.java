package org.xfl.reflect.proxy.dynamicProxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;/** * @program: learn * @description: 动态代理执行类 * @author: xfl * @create: 2018-07-16 16:09 **/public class DynamicProxyMain {    public static void main(String[] args){        InvocationHandler marketForWhisky = new Market(Whisky.class);        InvocationHandler marketForVodka = new Market(Vodka.class);        Wine dynamicProxyForWhisky = (Wine) Proxy.newProxyInstance(Whisky.class.getClassLoader(), Whisky.class.getInterfaces(), marketForWhisky);        dynamicProxyForWhisky.sell();        System.out.println("Whisky ClassLoader:"+Whisky.class.getClassLoader().toString() + " ;"+                           "Whisky Interfaces:"+Whisky.class.getInterfaces().toString());        Wine dynamicProxyForVodka = (Wine) Proxy.newProxyInstance(Vodka.class.getClassLoader(), Vodka.class.getInterfaces(), marketForVodka);        dynamicProxyForVodka.sell();        /**         * Java ClassLoader(双亲委托)         */        System.out.println("Vodka AppClassLoader:"+Vodka.class.getClassLoader().toString()                + " ;"                + "Vodka Parent ExtClassLoader:" + Vodka.class.getClassLoader().getParent()                + " ;"                + "Vodka Parent BootStrapClassLoader:" + Vodka.class.getClassLoader().getParent().getParent()                + " ;"                + "Vodka Interfaces:"+Vodka.class.getInterfaces().toString());        System.out.println(System.getProperty("sun.boot.class.path"));        System.out.println(System.getProperty("java.ext.dirs"));        System.out.println(System.getProperty("java.class.path"));    }}