package org.xfl.API.j8.lambda;import java.util.*;/** * @program: learn * @description: * @author: xfl * @create: 2018-08-14 11:19 **/public class LambdaLearn {    public static void main(String[] args){        /**         * Before Java8         */        new Thread(new Runnable() {            @Override            public void run() {                System.out.println("Before Java8 , too much code for too little to do.");            }        }).start();        /**         * Java8         * (params) -> expression         * (params) -> statement         * (params) -> { statements }         */        new Thread(() -> System.out.println("In Java8, Lambda expression rocks !")).start();        List<String> languages = Arrays.asList("Java","Javascript","Go","Python");        List<String> list = new ArrayList<>();        list.add("Java");        list.add("Javascript");        list.add("Go");        list.add("Python");        LambdaLearn lambdaLearn = new LambdaLearn();        lambdaLearn.sortUsingJava7(list);        System.out.println(list);        System.out.println("split with Java8...");        lambdaLearn.sortUsingJava8(languages);        System.out.println(languages);        //类型声明        MathOperation addition = (int a, int b) -> a + b;        //不用类型声明        MathOperation subtraction = (a,b) -> a - b;        //        MathOperation multiplication = (int a, int b) -> { return a * b;};        MathOperation division = (int a, int b) -> a/b;        MathOperation delivery = (a,b) -> a%b;        System.out.println("10 + 5 = " + lambdaLearn.operate(10,5,addition));        System.out.println("10 - 5 = " + lambdaLearn.operate(10,5,subtraction));        System.out.println("10 x 5 = " + lambdaLearn.operate(10,5,multiplication));        System.out.println("10 / 5 = " + lambdaLearn.operate(10,5,division));        System.out.println("10 % 5 = " + lambdaLearn.operate(10,5,delivery));        GreetingService greetingService = msg -> System.out.println("Hello," + msg);        GreetingService greetingService1 = (msg) -> System.out.println("Hello," + msg);        greetingService.sayMessage("MAC");        greetingService1.sayMessage("World");    }    private void sortUsingJava7(List<String> list){        Collections.sort(list, new Comparator<String>() {            @Override            public int compare(String o1, String o2) {                return o1.compareTo(o2);            }        });    }    private void sortUsingJava8(List<String> list){        Collections.sort(list,(s1,s2) -> s1.compareTo(s2));    }    interface MathOperation{        int operation(int a, int b);    }    interface GreetingService{        void sayMessage(String msg);    }    private int operate(int a, int b, MathOperation mathOperation){        return mathOperation.operation(a, b);    }}