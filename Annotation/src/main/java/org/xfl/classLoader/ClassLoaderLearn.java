package org.xfl.classLoader;import sun.applet.AppletClassLoader;import java.io.IOException;import java.io.InputStream;import java.net.URISyntaxException;import java.net.URL;import java.net.URLClassLoader;import java.util.Properties;import java.util.Set;/** * @program: learn * @description: Java ClassLoader Learn Note * @author: xfl * @create: 2018-07-16 18:03 **/public class ClassLoaderLearn {    public static void main (String[] args) throws URISyntaxException {        //自定义类加载器        ClassLoader myClassLoader = new ClassLoader() {            @Override            public Class<?> loadClass(String name) throws ClassNotFoundException {                try {                    String fileName = name.substring(name.lastIndexOf(".") + 1) + ".class";                    System.out.println(fileName);                    InputStream is = getClass().getResourceAsStream(fileName);                    if (is == null){                        return super.loadClass(fileName);                    }                    byte[] b = new byte[is.available()];                    is.read(b);                    return defineClass(name,b,0,b.length);                } catch (IOException e) {                    e.printStackTrace();                    throw new ClassNotFoundException();                }            }        };        try {            Object object1 = ClassLoaderLearn.class.getClassLoader().loadClass("org.xfl.classLoader.ClassLoaderLearn").newInstance();            System.out.println(object1.getClass());            System.out.println(object1 instanceof org.xfl.classLoader.ClassLoaderLearn);            Object object = myClassLoader.loadClass("org.xfl.classLoader.ClassLoaderLearn").newInstance();            System.out.println(object.getClass());            System.out.println(object instanceof ClassLoaderLearn);        } catch (ClassNotFoundException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InstantiationException e) {            e.printStackTrace();        }        /**         * 获取系统类加载器         */        URLClassLoader loader = (URLClassLoader) ClassLoader.getSystemClassLoader();        Integer flag = 0;        while (loader != null){            System.out.println(loader+"I'm flag:"+flag+",begin....");            URL[] urls = null;            if(loader != null){                urls = loader.getURLs();            }            if (urls != null && urls.length > 0){                for (URL url:urls){                    System.out.println(url);                }            }            System.out.println("I'm flag:"+flag+",end...");            loader = (URLClassLoader) loader.getParent();            ++flag;        }        /**         * 获取BootStrapLoader加载路径         */        URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();        for (int i = 0 ; i < urls.length ; i++){            System.out.println(urls[i].toExternalForm());        }        /**         * 获取系统Properties名称列表         */        Properties properties =  System.getProperties();        Set<String>  propertyNames  = properties.stringPropertyNames();        for (String pro:propertyNames){            System.out.println(pro +":"+ System.getProperty(pro));            System.out.println("_________split__________");        }        /**         * 获取当前线程上下文类加载器         */        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();    }}