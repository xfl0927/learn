package org.xfl.IO;import java.io.*;/** * @program: learn * @description: * @author: xfl * @create: 2019-05-09 12:07 **/public class DataInputStreamTest extends FilterInputStream implements DataInput {    /**     * Creates a <code>FilterInputStream</code>     * by assigning the  argument <code>in</code>     * to the field <code>this.in</code> so as     * to remember it for later use.     *     * @param in the underlying input stream, or <code>null</code> if     *           this instance is to be created without an underlying stream.     */    protected DataInputStreamTest(InputStream in) {        super(in);    }    @Override    public char readChar() throws IOException {        int ch1 = in.read();        int ch2 = in.read();        System.out.println("ch1:" + (char)ch1);        System.out.println("ch2:" + (char)ch2);        if ((ch1 | ch2) < 0)            throw new EOFException();        System.out.println("offset a char:" + (char)((ch1 << 8) + (ch2 << 0)));        return (char)((ch1 << 8) + (ch2 << 0));    }    @Override    public int read() throws IOException {        return in.read();    }    @Override    public void readFully(byte[] b) throws IOException {    }    @Override    public void readFully(byte[] b, int off, int len) throws IOException {    }    @Override    public int skipBytes(int n) throws IOException {        return 0;    }    @Override    public boolean readBoolean() throws IOException {        return false;    }    @Override    public byte readByte() throws IOException {        return 0;    }    @Override    public int readUnsignedByte() throws IOException {        return 0;    }    @Override    public short readShort() throws IOException {        return 0;    }    @Override    public int readUnsignedShort() throws IOException {        return 0;    }    @Override    public int readInt() throws IOException {        return 0;    }    @Override    public long readLong() throws IOException {        return 0;    }    @Override    public float readFloat() throws IOException {        return 0;    }    @Override    public double readDouble() throws IOException {        return 0;    }    @Override    public String readLine() throws IOException {        return null;    }    @Override    public String readUTF() throws IOException {        return null;    }}