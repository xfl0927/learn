package org.xfl.objectInit;/** * @program: learn * @description: * @author: xfl * @create: 2018-07-23 12:21 **/public class Test {    Person person = new Person("Test.class");    static {        System.out.println("Test static");    }    public Test(){        System.out.println("Test constructor");    }    {        System.out.println("Test NO-Static");    }    public static void main(String[] args){        System.out.println("------------JVM-LOADER-TO-MAIN------------");        /**         * 过程详解：         * 1.ClassLoader加载Test,初始化Test静态代码块         * 2.JVM加载main方法         * 3.JVM加载MyClass.class,发现MaClass继承Test去加载Test.class,发现Test.class已被加载,所以只需要加载MyClass.class,执行MyClass静态代码块         * 4.实例化MyClass:先初始化父类Test成员变量Person{先加载Person，执行Person静态代码块;创建Person实例:执行Person构造代码块,Person有参数构造}，再初始化父类Test构造方法，         * 初始化子类成员变量Person，初始化子类代码块和构造函数         * JVM:ClassLoader---->         * loader class---->         * 检查是否有父类(有:JVM loader父类static代码块)---->         * new(实例化对象){有父类:执行父类成员变量,NO-Static,无参数constructor;执行子类成员变量,NO-Static,constructor}         */        new MyClass();    }}