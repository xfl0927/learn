package org.xfl.reflect.proxy.dynamicProxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Proxy;/** * @program: learn * @description: 动态代理执行类 * @author: xfl * @create: 2018-07-16 16:09 **/public class DynamicProxyMain {    public static void main(String[] args){        Whisky whisky = new Whisky();        Vodka vodka = new Vodka();        InvocationHandler marketForWhisky = new Market(whisky);        InvocationHandler marketForVodka = new Market(vodka);        Wine dynamicProxyForWhisky = (Wine) Proxy.newProxyInstance(Whisky.class.getClassLoader(), Whisky.class.getInterfaces(), marketForWhisky);        dynamicProxyForWhisky.sell();        System.out.println("Whisky ClassLoader:"+Whisky.class.getClassLoader().toString() + " ;"+                           "Whisky Interfaces:"+Whisky.class.getInterfaces().toString());        Wine dynamicProxyForVodka = (Wine) Proxy.newProxyInstance(Vodka.class.getClassLoader(), Vodka.class.getInterfaces(), marketForVodka);        dynamicProxyForVodka.sell();        System.out.println("Vodka ClassLoader:"+Vodka.class.getClassLoader().toString() + " ;" +                "Vodka Interfaces:"+Vodka.class.getInterfaces().toString());    }}