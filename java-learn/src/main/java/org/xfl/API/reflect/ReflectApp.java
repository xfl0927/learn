package org.xfl.API.reflect;import java.lang.annotation.Annotation;import java.lang.reflect.*;import java.util.Arrays;import java.util.List;/** * @program: learn * @description: 反射 * @author: xfl * @create: 2018-07-16 15:42 **/public class ReflectApp {    public static void main(String[] args) throws InstantiationException, IllegalAccessException {        ForCopy original = new ForCopy("java",18);        ForCopy res = ReflectCopy.copy(original);        System.out.println("Res for copy by Reflect:" + res.toString());        Class<?> clazz = original.getClass();        for (Field field:clazz.getDeclaredFields()){            field.setAccessible(true);            String name = field.getName();            Object value = field.get(original);            System.out.println("field:" + name + ":" + value );        }        List<Annotation> annotations = Arrays.asList(clazz.getDeclaredAnnotations());        if (annotations.size() > 0){            for (Annotation annotation:annotations){                System.out.println("annotation:" + annotation.annotationType().getName());            }        }        List<Method> methods = Arrays.asList(clazz.getDeclaredMethods());        if (methods.size() > 0){            for (Method method:methods){                System.out.println("method:" + method.getName());                try {                    if (method.getName().equals("setName")){                        method.invoke(original,"Hello world.");                        List<Parameter> parameters = Arrays.asList(method.getParameters());                        for (Parameter parameter:parameters){                            System.out.println("param:" + parameter.getName());                            System.out.println("param:" + parameter.getType().getName());                        }                    }                } catch (InvocationTargetException e) {                    e.printStackTrace();                }            }            System.out.println("setName:" + original.getName());        }        List<Class> classes = Arrays.asList(clazz.getDeclaredClasses());        for (Class cl:classes){            System.out.println("class:" + cl.getName());        }        List<Constructor> constructorList = Arrays.asList(clazz.getDeclaredConstructors());        for (Constructor constructor:constructorList){            System.out.println("constructor:" + constructor.getName());        }    }}