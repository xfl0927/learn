package org.xfl.generics;import java.util.ArrayList;import java.util.List;/** * @program: Java_Base * @description: * @author: xfl * @create: 2019-02-28 10:22 **/public class GenericMain {    public static void main(String[] args){        List<String> classStringArray = new ArrayList<>();        List<Integer> classIntegerArray = new ArrayList<>();        Class stringArrayClass = classStringArray.getClass();        Class integerArrayClass = classIntegerArray.getClass();        //类型擦除 泛型信息只存在于代码编译阶段，在进入JVM之前，与泛型相关的信息会被擦掉。        //在类型擦除的时候，如果没有指定上限，T则会被转译成普通的Object，如果指定了上限，则类型参数会被替换成该上限类型。        if (stringArrayClass.equals(integerArrayClass)) {            System.out.println("StringArrayClass And IntegerArrayClass 类型相同");        }        System.out.println("StringArray:"+stringArrayClass.getName());        System.out.println("IntegerArray:"+integerArrayClass.getName());        GenericTest<Apple> appleGenericTest = new GenericTest<>();        appleGenericTest.show();        GenericBorder<Apple> appleGenericBorder = new GenericBorder<>();        appleGenericBorder.show();    }    static class Fruit{        public String color;        public Fruit(){}        public Fruit(String color){            this.color = color;        }        public String getColor(){            return color;        }    }    static class Apple extends Fruit{        public Apple(String color) {            this.color = color;        }    }    static class GenericBorder<T extends Fruit>{        T t;        public void show(){            System.out.println(this.t.getClass().getName());        }    }    static class GenericTest<T> {        T t;        public void show(){            System.out.println(this.t.getClass().getName());        }        public <T> String genericMethod(T t) {            return t.getClass().getName();        }        public <E> String genericMethod_1(E e){            return e.getClass().getName();        }        public <E extends Fruit> String genericMethod_2(E e) {            return e.getClass().getName();        }    }}