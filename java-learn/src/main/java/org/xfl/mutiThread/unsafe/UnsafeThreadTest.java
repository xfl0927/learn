package org.xfl.mutiThread.unsafe;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @program: learn * @description: * @author: xfl * @create: 2018-07-25 10:15 **/public class UnsafeThreadTest {    public static void main(String[] args){        //实例化count 线程共享此资源        Count count = new Count();        Map<String,Integer> tMap = new HashMap<>();        List<Integer> t1 = new ArrayList<>();        List<Integer> t2 = new ArrayList<>();        int flag = 0;        Runnable runnable = () -> {            target(count,t1,t2,tMap);        };        List<Thread> threads = new ArrayList<>();        /**         * 创建10个线程，执行同一个Runnable instance的 run() method ：每个线程执行run()10000次,理论num值为10000*10         */        for (int i = 0; i < 10; i++){            Thread thread = new Thread(runnable);            threads.add(thread);            thread.start();        }        /**         * 当线程结束时获取num值         */        while (true){            if (allThreadTerminated(threads)){                System.out.println(count.getNum());                break;            }        }        //验证 每个thread均执行循环        System.out.println("t1 length:"+ t1.size() + " t2 length:" + t2.size());        for (Integer el1:t1){            for (Integer el2:t2){                if (el1.equals(el2)){                    System.out.println("---");                    System.out.println(el1);                }            }        }    }    /**     * 判断线程存活状态，存活表示没结束，返回false；反之返回true     * @param threads     * @return     */    private static boolean allThreadTerminated(List<Thread> threads){        for (Thread thread:threads){            if(thread.isAlive()){                return false;            }        }        return true;    }    private static void target(Count count,List<Integer> t1,List<Integer> t2,Map<String,Integer> tMap){        for (int i = 0 ; i < 10000; i++){            count.increment();            if (Thread.currentThread().getName().equals("Thread-1")){                t1.add(i);            } else if (Thread.currentThread().getName().equals("Thread-2")){                t2.add(i);            }            tMap.put(Thread.currentThread().getName() + i,i);        }    }}