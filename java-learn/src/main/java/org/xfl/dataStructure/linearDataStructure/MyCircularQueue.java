package org.xfl.dataStructure.linearDataStructure;import java.util.ArrayList;import java.util.List;/** * @program: learn * @description: circular queue * @author: xfl * @create: 2018-10-09 09:38 **/public class MyCircularQueue {    private List<Integer> data;    /**     * the front position of the queue     */    private Integer p_start;    /**     * the size of the queue     *     */    private Integer size;    /**     * the end position of the queue     */    private Integer p_end;    /** Initialize your data structure here. Set the size of the queue to be k. */    public MyCircularQueue(int k) {        data = new ArrayList<>(k);        this.size = k;        this.p_start = -1;        this.p_end = -1;    }    /** Insert an element into the circular queue. Return true if the operation is successful. */    public boolean enQueue(int value) {        if (isFull()){            return false;        } else {            data.add(value);            p_end ++;            return true;        }    }    /** Delete an element from the circular queue. Return true if the operation is successful. */    public boolean deQueue() {        if (isEmpty()){            return false;        } else {            p_start ++;            return true;        }    }    /** Get the front item from the queue. */    public Integer Front() {        if (isEmpty()){            return null;        } else {            return data.get(p_start);        }    }    /** Get the last item from the queue. */    public Integer Rear() {        if (isEmpty()){            return null;        } else {            return data.get(p_end);        }    }    /** Checks whether the circular queue is empty or not. */    public boolean isEmpty() {        if (p_start >= data.size()){            return true;        } else {            return false;        }    }    /** Checks whether the circular queue is full or not. */    public boolean isFull() {        if ((size - p_end) <= 0){            return true;        } else {            return false;        }    }    public List<Integer> getData() {        return data;    }    public void setData(List<Integer> data) {        this.data = data;    }    public Integer getP_start() {        return p_start;    }    public void setP_start(Integer p_start) {        this.p_start = p_start;    }    public Integer getSize() {        return size;    }    public void setSize(Integer size) {        this.size = size;    }    public Integer getP_end() {        return p_end;    }    public void setP_end(Integer p_end) {        this.p_end = p_end;    }    /**     * Your MyCircularQueue object will be instantiated and called as such:     * MyCircularQueue obj = new MyCircularQueue(k);     * boolean param_1 = obj.enQueue(value);     * boolean param_2 = obj.deQueue();     * int param_3 = obj.Front();     * int param_4 = obj.Rear();     * boolean param_5 = obj.isEmpty();     * boolean param_6 = obj.isFull();    */    public static void main(String[] args){        MyCircularQueue obj = new MyCircularQueue(5);        System.out.println("Get the queue initial size:" + obj.getData().size());        boolean param_1 = obj.enQueue(1);        System.out.println("Get enQueue is successful or not:" + param_1);        boolean param_2 = obj.deQueue();        System.out.println("Get deQueue is successful or not:" + param_2);        int param_3 = obj.Front();        int param_4 = obj.Rear();        System.out.println("Get the front and Rear:" + param_3 + "--" + param_4);        boolean param_5 = obj.isEmpty();        boolean param_6 = obj.isFull();    }}