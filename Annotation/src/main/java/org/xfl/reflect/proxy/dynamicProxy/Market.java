package org.xfl.reflect.proxy.dynamicProxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;/** * @program: learn * @description: 动态代理商城 * @author: xfl * @create: 2018-07-16 16:03 **/public class Market implements InvocationHandler {    Object  product;    public Market(Class clazz) {        try {            this.product = clazz.newInstance();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println("开始卖酒了：" + this.getClass().getSimpleName());        marketBusiness(true);        method.invoke(product, args);        marketBusiness(false);        System.out.println("酒已经卖出去了。");        return null;    }    private void marketBusiness(Boolean isStart){        if (isStart){            System.out.println("策划售价。");        } else {            System.out.println("接受返点。赚取利润！");        }    }}